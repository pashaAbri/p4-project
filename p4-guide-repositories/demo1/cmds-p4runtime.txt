# Commands copied from README-p4runtime.md, for convenience

```
my_dev1_addr='localhost:9559'
my_dev1_id=0
p4info_txt_fname='demo1.p4_16.p4info.txt'
p4prog_binary_fname='demo1.p4_16.json'
import p4runtime_sh.shell as sh
sh.setup(device_id=my_dev1_id,
         grpc_addr=my_dev1_addr,
         election_id=(0, 1), # (high_32bits, lo_32bits)
         config=sh.FwdPipeConfig(p4info_txt_fname, p4prog_binary_fname))

te = sh.TableEntry('ipv4_da_lpm')(action='ingressImpl.my_drop', is_default=True)
te.modify()
te = sh.TableEntry('mac_da')(action='ingressImpl.my_drop', is_default=True)
te.modify()
te = sh.TableEntry('send_frame')(action='egressImpl.my_drop', is_default=True)
te.modify()

def add_ipv4_da_lpm_entry_action_set_l2ptr(ipv4_addr_str, prefix_len_int, l2ptr_int):
    te = sh.TableEntry('ipv4_da_lpm')(action='set_l2ptr')
    # Note: p4runtime-shell raises an exception if you attempt to
    # explicitly assign to te.match['dstAddr'] a prefix with length 0.
    # Just skip assigning to te.match['dstAddr'] completely, and then
    # inserting the entry will give a wildcard match for that field,
    # as defined in the P4Runtime API spec.
    if prefix_len_int != 0:
        te.match['dstAddr'] = '%s/%d' % (ipv4_addr_str, prefix_len_int)
    te.action['l2ptr'] = '%d' % (l2ptr_int)
    te.insert()

def add_mac_da_entry_action_set_bd_dmac_intf(l2ptr_int, bd_int, dmac_str, intf_int):
    te = sh.TableEntry('mac_da')(action='set_bd_dmac_intf')
    te.match['l2ptr'] = '%d' % (l2ptr_int)
    te.action['bd'] = '%d' % (bd_int)
    te.action['dmac'] = dmac_str
    te.action['intf'] = '%d' % (intf_int)
    te.insert()

def add_send_frame_entry_action_rewrite_mac(out_bd_int, smac_str):
    te = sh.TableEntry('send_frame')(action='rewrite_mac')
    te.match['out_bd'] = '%d' % (out_bd_int)
    te.action['smac'] = smac_str
    te.insert()

add_ipv4_da_lpm_entry_action_set_l2ptr('10.1.0.1', 32, 58)
add_mac_da_entry_action_set_bd_dmac_intf(58, 9, '02:13:57:ab:cd:ef', 2)
add_send_frame_entry_action_rewrite_mac(9, '00:11:22:33:44:55')

add_ipv4_da_lpm_entry_action_set_l2ptr('10.1.0.200', 32, 81)
add_mac_da_entry_action_set_bd_dmac_intf(81, 15, '08:de:ad:be:ef:00', 4)
add_send_frame_entry_action_rewrite_mac(15, 'ca:fe:ba:be:d0:0d')
```


# Older commands used for debugging long ago, before I started using p4runtime-shell, but perhaps still useful for someone

```
d = h.table_dump_data('ipv4_da_lpm')


from p4.v1 import p4runtime_pb2
req = p4runtime_pb2.ReadRequest()
req.device_id = h.device_id
entity = req.entities.add()
table = entity.table_entry
table.table_id = h.get_table_id('ipv4_da_lpm')

# debugging
req
type(req)    # p4.v1.p4runtime_pb2.ReadRequest

# Try sending ReadRequest:
rep = h.stub.Read(req)
type(rep)
# -> <class 'grpc._channel._Rendezvous'>

resp=list(rep)
len(resp)
# -> 1

r1=resp[0]
type(r1)
# -> <class 'p4.v1.p4runtime_pb2.ReadResponse'>


# I got names of fields of messags from file
# PI/proto/p4runtime/proto/p4/v1/p4runtime.proto

type(r1.entities)
# -> <type 'google.protobuf.pyext._message.RepeatedCompositeContainer'>
type(r1.complete)
# -> <type 'bool'>

r1.complete
# -> False

# TBD: How do I get the entire response?  r1.complete = False leads me
# to believe this is only the beginning of the response, not all of
# it.

r11=r1.entities[0]
type(r11)
# -> <class 'p4.v1.p4runtime_pb2.Entity'>

# TBD; No error occurs when I look at all of the 'oneof' fields of an
# Entity.  In the Python Protobuf bindings, how do I determine which
# of them is the one that is valid?

>>> r11.extern_entry

>>> r11.digest_entry

>>> type(r11.table_entry)
<class 'p4.v1.p4runtime_pb2.TableEntry'>

>>> dir(r11)

The output was long, but helped me find 'WhichOneof'.  I searched on
Internet for that and protobuf, and found this:

r11.WhichOneof('entity')
# -> 'table_entry'
```
